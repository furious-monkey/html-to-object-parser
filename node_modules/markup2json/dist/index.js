import { DOMParser } from '@xmldom/xmldom';

const INVALID_ERROR_MSG = "Invalid input. Please provide a valid HTML or XML string.";
const MALFORMED_ERROR_MSG = "Malformed input. Please ensure that the input is a well-formed HTML or XML string.";
const WELLFORMED_REGEX = /^<[a-zA-Z0-9]+:?[a-zA-Z]+.*>.*<\/[a-zA-Z0-9]+:?[a-zA-Z]+>$/;
function markup2Json(html) {
  if (typeof html !== "string")
    throw new SyntaxError(INVALID_ERROR_MSG);
  if (html.length === 0)
    throw new SyntaxError(INVALID_ERROR_MSG);
  if (!html.match(WELLFORMED_REGEX))
    throw new SyntaxError(MALFORMED_ERROR_MSG);
  const parser = new DOMParser();
  const document = parser.parseFromString(html);
  return nodeToJSON(document.documentElement);
}
function kebabToCamel(s) {
  return s.replace(/-([a-z])/g, g => g[1].toUpperCase());
}
function nodeToJSON(node) {
  if (node.nodeType === 3 && !node.nodeValue.trim()) {
    return null;
  }
  const result = {
    tag: node.nodeName
  };
  if (node.nodeType === 3 || node.nodeType === 4) {
    result.text = node.nodeValue?.trim();
  }
  if (node.attributes && node.attributes.length > 0) {
    for (let i = 0; i < node.attributes.length; i++) {
      const attribute = node.attributes[i];
      let styleObject;
      if (attribute.name !== 'style') {
        styleObject = attribute.value
      } else {
        styleObject = attribute.value.split(';').reduce((obj, item) => {
          const [property, value] = item.split(':').map(i => i.trim());
          obj[kebabToCamel(property)] = value;
          return obj;
        }, {});
      }
      
      result[attribute.name] = styleObject;
    }
  }
  if (node.childNodes && node.childNodes.length > 0) {
    result.children = [];
    for (let i = 0; i < node.childNodes.length; i++) {
      const child = node.childNodes[i];
      const childJSON = nodeToJSON(child);
      if (childJSON) {
        if (childJSON.tag === '#text') {
          result.text = (result.text || '') + ' ' + childJSON.text;
        } else {
          result.children.push(childJSON);
        }
      }
    }
  }
  return result;
}

export { markup2Json as default };
